### Ejercicio 1

Demostrar que el algoritmo voraz para el problema de la mochila sin fragmentación no siempre obtiene
la solución óptima. Para ello puede modificar el algoritmo visto en clase de manera de que no permita
fragmentación y encontrar un ejemplo para el cual no halla la solución óptima.

type Objeto = tuple
    id : Nat
    value: Float
    weight: Float
    end tuple

    obj : Objeto
    type Obj_Mochila = tuple
    fract : Float
    end tuple

fun mochila(W: Float, C: Set of Objeto) ret L : List of Obj_Mochila
    var o_m : Obj_Mochila var resto : Float
    var C_aux : Set of Objeto
    S:= empty_list()
    C_aux:= set_copy(C)
    resto:= W
    do (resto > 0) →
        o_m.obj := select_obj(C_aux)
        if o_m.obj.weight <= resto then 
            o_m.fract := 1.0
            resto := resto - o_m.obj.weight
        else o_m.fract := resto/o_m.obj.weight
            resto := 0
        fi
        addl(S,o_m)
        elim(C_aux,o_m.obj)
    od
    set_destroy(C_aux)
end fun


fun select_obj(C: Set of Objeto) ret r : Objeto
var C_aux : Set of Objeto
var o : Objeto
var m : Float
m := -∞
C_aux := set_copy(C)
do (not is_empty_set(C_aux)) →
    o := get(C_aux)
    if (o.value/o.weight > m) then 
        m := o.value/o.weight
        r := o
    fi
    elim(C_aux,o)
od
set_destroy(C_aux)
end fun



// Resolver! 

### Ejercicio 2

Considere el problema de dar cambio. Pruebe o dé un contraejemplo: si el valor de cada moneda es al
menos el doble de la anterior, y la moneda de menor valor es 1, entonces el algoritmo voraz arroja siempre
una solución óptima.


Cuando cada moneda tiene un valor que es al menos el doble de la anterior, el sistema de monedas se denomina canónico, porque cualquier cantidad se puede descomponer en monedas usando un enfoque voraz y obtener la solución óptima.
Prueba: Por qué el Algoritmo Voraz Funciona

    Propiedad de Optimalidad Local:
        Dado que el valor de cada moneda es al menos el doble de la anterior, no hay beneficios en seleccionar monedas más pequeñas si una moneda más grande puede cubrir una parte
        del cambio. Por ejemplo, si tienes que cubrir un valor de 6 y las monedas disponibles son {1,2,4,8}, usar la moneda de denominación 4 es más eficiente que usar
        2+2, tanto en términos de cantidad de monedas como de total cubierto.

    Descomposición del Problema:
        Supongamos que el algoritmo voraz selecciona una moneda de valor c_k, y el cambio restante es rr. El problema se reduce a encontrar el cambio para r, lo cual puede
        ser resuelto de manera óptima con el mismo enfoque porque rr es estrictamente menor que c_k y sigue siendo un problema más pequeño del mismo tipo.

    Inducción:
        Base: Para r<c_1, la solución óptima es r monedas de valor c1=1, lo cual es también lo que selecciona el algoritmo voraz.
        Paso inductivo: Si el algoritmo voraz da una solución óptima para r<k, entonces seleccionará la moneda más grande posible para k, reduciendo el problema a r−c_k.
        Por la hipótesis inductiva, la solución para r−c_k también será óptima.

    Resultado:
        Por inducción, el algoritmo voraz siempre genera una solución óptima.

-------------------------------------------------------------------------------------------------------------------
Para cada uno de los siguientes ejercicios:
• Describa cuál es el criterio de selección.
• ¿En qué estructuras de datos representará la información del problema?
• Explique el algoritmo, es decir, los pasos a seguir para obtener el resultado. No se pide que ”lea” el
algoritmo (”se define una variable x”, ”se declara un for”), si no que lo explique (”se recorre la lista/el
arreglo/” o ”se elije de tal conjunto el que satisface...”).
• Escriba el algoritmo en el lenguaje de programación de la materia.

-------------------------------------------------------------------------------------------------------------------

### Ejercicio 3

Se desea realizar un viaje en un automóvil con autonomı́a A (en kilómetros), desde la localidad l0 hasta la
localidad ln pasando por las localidades l1 , . . . , ln−1 en ese orden. Se conoce cada distancia di ≤ A entre
la localidad li−1 y la localidad li (para 1 ≤ i ≤ n), y se sabe que existe una estación de combustible en
cada una de las localidades.
Escribir un algoritmo que compute el menor número de veces que es necesario cargar combustible para
realizar el viaje, y las localidades donde se realizarı́a la carga.
Suponer que inicialmente el tanque de combustible se encuentra vacı́o y que todas las estaciones de servicio
cuentan con suficiente combustible.

Planteamiento:
    Entrada:
        Autonomía del automóvil A (en kilómetros)
        Distancias entre localidades d={d1,...,dn} donde di es la distancia entre li-1 y li 

    Salida:
        Número mínimo de paradas para cargar combustible
        Localidades donde se realizan las cargas

Algoritmo Voraz

El algoritmo toma las decisiones de cargar combustible basándose en las siguientes reglas:

    Partimos con el tanque vacío (combustible_restante=0).
    Recorreremos las localidades desde l0 hasta ln, evaluando si podemos llegar a la siguiente localidad:
        Si la distancia a la siguiente localidad (di) es menor o igual al combustible restante, continuamos.
        Si no podemos llegar, paramos a cargar combustible en la localidad actual.
    Repetimos este proceso hasta alcanzar la última localidad.

type parnloc= tuple 
    stops:nat 
    loc: List of nat
    end tuple

fun cargar_combustible(A: Nat, d: Array[Nat]) ret (ans:parnloc)
    var paradas: Nat
    var localidades: List of nat 
    var combustible_restante: Nat
    var posicion: Nat
    paradas:=0
    localidades:= empty_list()
    combustible_restante := 0
    posicion:=0

    for i := 1 to length(d) do
        if d[i] > A then
            error("No es posible completar el viaje. Distancia supera la autonomía.")
        fi

        // Si no podemos llegar a la siguiente localidad
        if d[i] > combustible_restante then
            // Hacer una parada para cargar combustible en la localidad actual
            paradas := paradas + 1
            append(localidades, posicion) // Registrar la localidad actual
            combustible_restante := A // Llenar el tanque
        fi

        // Actualizar la cantidad de combustible restante
        combustible_restante := combustible_restante - d[i]
        posicion := posicion + 1
    od

   ans->stops:=paradas
   ans->loc:=localidades
end fun

Explicación del Algoritmo

    Inicialización:
        Iniciamos con 0 paradas y el tanque vacío.

    Recorrido de las localidades:
        Verificamos si podemos llegar a la siguiente localidad (d[i]) con el combustible restante.
        Si no es posible, paramos a cargar combustible en la localidad actual.

    Registrar paradas:
        Cada vez que hacemos una parada, registramos la localidad y llenamos el tanque.

    Condición de imposibilidad:
        Si alguna distancia es mayor que la autonomía A, no podemos completar el viaje.


### Ejercicio 4

En numerosas oportunidades se ha observado que cientos de ballenas nadan juntas hacia la costa y quedan
varadas en la playa sin poder moverse. Algunos sostienen que se debe a una pérdida de orientación
posiblemente causada por la contaminación sonora de los océanos que interferirı́a con su capacidad de
inter-comunicación. En estos casos los equipos de rescate realizan enormes esfuerzos para regresarlas al
interior del mar y salvar sus vidas.
Se encuentran n ballenas varadas en una playa y se conocen los tiempos s1 , s2 , . . . , sn que cada ballena
es capaz de sobrevivir hasta que la asista un equipo de rescate. Dar un algoritmo voraz que determine el
orden en que deben ser rescatadas para salvar el mayor número posible de ellas, asumiendo que llevar una
ballena mar adentro toma tiempo constante t, que hay un único equipo de rescate y que una ballena no
muere mientras está siendo regresada mar adentro.

Planteamiento:
    Entranda:
        - b ballenas: nat
        - array[s1..sn] of nat de tiempo en el que cada ballena puede sobrevivir hasta que la asistan 
    Salida:
        - numero de ballenas salvadas
Condiciones:
    Las ballenas pueden sobrevivir s tiempo hasta que las socorran y tardan t (constante) tiempo en ser devueltas
    al mar, pero t no cuenta por sobre s, aunque si sobre las otras ballenas.
    Hay un sólo equipo de rescate.
Objetivo:
    Devolver la mayor cantidad de ballenas al mar antes de que mueran
Política del algoritmo:
    Salvar a la ballena que menos tiempo de vida le quede primero

Algoritmo:

const t ?

fun save_whales(whales:nat,s[1..whales]:array of nat) ret saves:nat
    var total_time:nat
    total_time := 0
    saves:=0
    sort(s) //asumimos la funcion sort
    for i:=1 to whales do 
        if total_time + t <= s[i] then 
            saves:=saves + 1 
            total_time:=total_time + t
        fi
    od
end fun



### Ejercicio 5:

Sos el flamante dueño de un teléfono satelital, y se lo ofrecés a tus n amigos para que lo lleven con
ellos cuando salgan de vacaciones el próximo verano. Lamentablemente cada uno de ellos irá a un lugar
diferente y en algunos casos, los perı́odos de viaje se superponen. Por lo tanto es imposible prestarle el
teléfono a todos, pero quisieras prestárselo al mayor número de amigos posible.
Suponiendo que conoces los dı́as de partida y regreso (pi y ri respectivamente) de cada uno de tus amigos,
¿cuál es el criterio para determinar, en un momento dado, a quien conviene prestarle el equipo?
Tener en cuenta que cuando alguien lo devuelve, recién a partir del dı́a siguiente puede usarlo otro. Escribir
un algoritmo voraz que solucione el problema.

Planteamiento:
    Entranda: n amigos, dia de partida y regraso de los amigos (pi y ri).

    Salida: Cantidad de amigos a los que pudiste prestarlo

Condiciones:
    Tenes que prestarcelo antes de que se vayan de vacaciones, y hay que esperar un día entre que te lo devuelven
    para darselo a otro.

Política del algoritmo:
    Propuesta1: Se le presta al que sale primero, si hay dos amigos que salen al mismo tiempo entonces al que tenga
    un intervalo de viaje más corto será el seleccionado.

Algoritmo:

type viaje = tuple 
    partida:nat  //asumimos que representamos fechas como naturales
    llegada:nat
    end tuple

fun tiempo_viaje(v:viaje) ret delta:nat 
    delta:=v.llegada-v.partida
end fun

//bubble sort
proc sort(in/out a:array of viaje)
    for i := 1 to length(viajes) - 1 do
        for j := 1 to length(viajes) - i do
            if viajes[j].partida > viajes[j + 1].partida or
               (viajes[j].partida == viajes[j + 1].partida and
                (viajes[j].llegada - viajes[j].partida) > (viajes[j + 1].llegada - viajes[j + 1].partida)) then
                swap(viajes[j], viajes[j + 1])
            fi
        od
    od
end proc

fun prestar_telefono(amigos:nat, viajes[1..amigos]:array of viaje,dia:nat) ret prestamos:nat
    var tiempo_celular:nat 
    tiempo_celular := 0
    prestamos:=0
    sort(viajes) //asumimos implementada sort (tiempo partida y delta)

    for i:=1 to amigos do 
        if tiempo_celular < viajes[i.partida] then
            tiempo_celular := viajes[i].llegada + dia
            prestamos:=prestamos + 1
        fi
    od
end fun



### Ejercicio 6

Para obtener las mejores facturas y medialunas, es fundamental abrir el horno el menor número de veces
posible. Por supuesto que no siempre es fácil ya que no hay que sacar nada del horno demasiado temprano,
porque queda cruda la masa, ni demasiado tarde, porque se quema.
En el horno se encuentran n piezas de panaderı́a (facturas, medialunas, etc). Cada pieza i que se encuentra
en el horno tiene un tiempo mı́nimo necesario de cocción ti y un tiempo máximo admisible de cocción Ti .
Si se la extrae del horno antes de ti quedará cruda y si se la extrae después de Ti se quemará.
Asumiendo que abrir el horno y extraer piezas de él no insume tiempo, y que ti ≤ Ti para todo i ∈
{1, . . . , n}, ¿qué criterio utilizarı́a un algoritmo voraz para extraer todas las piezas del horno en perfecto
estado (ni crudas ni quemadas), abriendo el horno el menor número de veces posible? Implementarlo.





Planteamiento:
    Entranda: n piezas de panadería, tiempo mínimo(ti) y máximo de cocción(Ti)

    Salida: numero de veces abierto el horno

    Estructuras de datos: 
        Propuesta1: Usar una tupla con el intervalo ti y Ti y un id, y un set que las contenga a todas.
        Propuesta2: Usar una tupla con el intervalo ti y Ti y un id, y un array que los contenga.

Condiciones: añadir y extraer piezas del horno no consume tiempo. ti<=Ti para todo i en {1,...,n}

Política del algoritmo: 
                Abrir el horno cuándo haya el mayor número de intersecciones de tiempo en el 
                que las piezas estén bien cocidas, sin que ninguna se queme ni sacando crudas.
                Notar que si se queman las perdemos, pero si están crudas las podemos dejar 
                más tiempo.
                Idea: tomar el mínimo de todas las Ti y hacer la interseccion con todas las 
                ti que sucedan antes que ese Ti. Luego descartar todas esos elementos del 
                conjunto y sumar una apertura del horno.

Algoritmo:
Propuesta2:

type factura = tuple 
    id:string //no sé si están implementadas las strings pero asumimos que sí.
    minimo:nat 
    maximo:nat
    end tuple


fun optimo_horno(facturas:array[1..n] of factura) ret tiempos_abierto:nat
    var ultimo_tiempo: nat 
    ultimo_tiempo:=0
    tiempos_abierto:= 0
    sort(facturas)  //sorting basandonos en Ti, más chico a más grande

    for i from 1 to n do
        if facturas[i].minimo > ultimo_tiempo then
            // Abrir el horno en T_i de la pieza actual
            tiempos_abierto := tiempos_abierto + 1
            ultimo_tiempo := facturas[i].maximo
        fi
    od
end fun




### Ejercicio 7

Un submarino averiado descansa en el fondo del océano con n sobrevivientes en su interior. Se conocen las
cantidades c1 , . . . , cn de oxı́geno que cada uno de ellos consume por minuto. El rescate de sobrevivientes
se puede realizar de a uno por vez, y cada operación de rescate lleva t minutos.

(a)
Escribir un algoritmo que determine el orden en que deben rescatarse los sobrevivientes para salvar
al mayor número posible de ellos antes de que se agote el total C de oxı́geno.

(b)
Modificar la solución anterior suponiendo que por cada operación de rescate se puede llevar a la
superficie a m sobrevivientes (con m ≤ n).

Resoluciones:
a)


fun rescate_uno_por_vez(c: array[1..n] of nat, t: nat, C: nat) ret sobrevivientes: nat
    // c: consumos de oxígeno de los sobrevivientes
    // t: tiempo por rescate
    // C: oxígeno total disponible

    var oxigeno_requerido: nat
    var oxigeno_restante:nat
    var sobrevivientes:nat
    oxigeno_requerido:=0
    oxigeno_restante:=C 
    sobrevivientes:=0
    sort(c)  // Ordenar consumos en orden ascendente

    for i from 1 to n do
        oxigeno_requerido := t * (n - i + 1) * c[i]
        if oxigeno_requerido <= oxigeno_restante then
            oxigeno_restante := oxigeno_restante - oxigeno_requerido
            sobrevivientes := sobrevivientes + 1
        else
            break
        fi
    od

end fun


b) 


fun rescate_grupos(c: array[1..n] of nat, t: nat, C: nat, m: nat) ret sobrevivientes: nat
    // c: consumos de oxígeno de los sobrevivientes
    // t: tiempo por rescate
    // C: oxígeno total disponible
    // m: cantidad de sobrevivientes rescatados por operación

    var oxigeno_restante:nat 
    var sobrevivientes:nat
    var i:nat
    oxigeno_restante := C
    sobrevivientes := 0
    i := 1
    sort(c)  // Ordenar consumos en orden ascendente
    var grupo:nat
    var oxigeno_requerido:nat

    while i <= n do
        // Calcular el oxígeno requerido para este grupo
        grupo := min(m, n - i + 1)
        oxigeno_requerido := t * sum(c[i..i+grupo-1])
        
        if oxigeno_requerido <= oxigeno_restante then
            oxigeno_restante := oxigeno_restante - oxigeno_requerido
            sobrevivientes := sobrevivientes + grupo
            i := i + grupo
        else
            break
        fi
    od
end fun




### Ejercicio 8 

Usted vive en la montaña, es invierno, y hace mucho frı́o. Son las 10 de la noche. Tiene una voraz estufa
a leña y n troncos de distintas clases de madera. Todos los troncos son del mismo tamaño y en la estufa
entra solo uno por vez. Cada tronco i es capaz de irradiar una temperatura ki mientras se quema, y
dura una cantidad ti de minutos encendido dentro de la estufa. Se requiere encontrar el orden en que
se utilizarán la menor cantidad posible de troncos a quemar entre las 22 y las 12 hs del dı́a siguiente,
asegurando que entre las 22 y las 6 la estufa irradie constantemente una temperatura no menor a K1; y
entre las 6 y las 12 am, una temperatura no menor a K2.


type Tronco = tuple
    k: nat      // Temperatura generada
    t: nat      // Tiempo de duración
end tuple

fun calcular_troncos(troncos: array[1..n] of Tronco, K1: nat, K2: nat) ret total_troncos: nat
    // Ordenar troncos por eficiencia (descendente)
    sort(troncos, key=lambda tronco: tronco.k / tronco.t, reverse=True)

    total_troncos := 0

    // Función auxiliar para cubrir un intervalo

    // Cubrir el intervalo de 22:00 a 6:00 (K1)
    cubrir_intervalo(K1, 480,troncos, total_troncos)

    // Cubrir el intervalo de 6:00 a 12:00 (K2)
    cubrir_intervalo(K2, 360, troncos, total_troncos)

end fun



proc cubrir_intervalo(in temperatura_minima: nat, in duracion: nat,in troncos:array[1..n] of troncos, in/out total_troncos)
    var tiempo_restante:nat
    var i:nat
    var tiempo_usado
    tiempo_restante:=duracion 
    i:=1

    while tiempo_restante > 0 do
        f i > n then
            error("No hay suficientes troncos para cumplir la restricción.")
        fi

        tronco := troncos[i]
        tiempo_usado := min(tiempo_restante, tronco.t)

        if tiempo_usado * tronco.k < tiempo_restante * temperatura_minima then
            error("No es posible mantener la temperatura requerida.")
        fi

        tiempo_restante := tiempo_restante - tiempo_usado
        total_troncos := total_troncos + 1
        i := i + 1
    od
end proc

### Ejercicio 9 


(sobredosis de limonada) Es viernes a las 18 y usted tiene ganas de tomar limonada con sus amigos. Hay
n bares cerca, donde cada bar i tiene un precio Pi de la pinta de limonada y un horario de happy hour Hi ,
medido en horas a partir de las 18 (por ejemplo, si el happy hour del bar i es hasta las 19, entonces Hi
= 1), en el cual la pinta costará un 50% menos. Usted toma una cantidad fija de 2 pintas por hora y no
se considera el tiempo de moverse de un bar a otro. Se desea obtener el menor dinero posible que usted
puede gastar para tomar limonada desde las 18 hasta las 02 am (es decir que usted tomará 16 pintas)
eligiendo en cada hora el bar que más le convenga.

fun calcular_gasto(n: nat, P: array[1..n] of float, H: array[1..n] of nat) ret gasto_total: float
    var menor_precio:float
    var precio_actual:float
    gasto_total:= 0.0

    for hora from 1 to 8 do
        menor_precio := infinito
        for i from 1 to n do
            if hora <= H[i] then
                precio_actual := P[i] / 2  // Happy hour
            else
                precio_actual := P[i]      // Precio regular
            fi
            if precio_actual < menor_precio then
                menor_precio := precio_actual
            fi
        od
        gasto_total := gasto_total + menor_precio * 2  // 2 pintas por hora
    od

end fun

últimos ejercicios hechos con ayuda de IA por cuestiones de tiempo
