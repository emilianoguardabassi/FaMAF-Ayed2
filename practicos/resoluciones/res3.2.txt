### Ejercicio 1 

Ejecutar paso a paso, graficando las soluciones parciales, el algoritmo de Prim que computa el árbol
generador mı́nimo sobre los grafos con nodos {1, 2, . . . , 8} y costos dados por una función w:
(a)
w((1, 2)) = 7
w((1, 6)) = 3
w((1, 7)) = 5
w((1, 3)) = 3

w((2, 3)) = 4
w((2, 4)) = 2 w((2, 5)) = 1
w((3, 4)) = 5

w((3, 6)) = 4
w((3, 8)) = 6
w((4, 6)) = 8
w((5, 4)) = 3

w((5, 6)) = 6
w((6, 7)) = 5
w((8, 5)) = 2
w((8, 7)) = 3

b) 
w((1, 2)) = 3
w((1, 6)) = 2
w((1, 7)) = 8
w((1, 3)) = 1

w((2, 3)) = 1
w((2, 4)) = 1
w((2, 5)) = 5
w((3, 4)) = 9

w((3, 6)) = 3
w((3, 8)) = 7
w((4, 6)) = 1
w((5, 4)) = 2

w((5, 6)) = 6
w((6, 7)) = 6
w((8, 5)) = 1
w((8, 7)) = 5




resoluciones:

a)


vértice inicial: 1.

Algoritmo de Prim

Paso 0: C = {1, 2, 3, 4, 5, 6, 7, 8}. T = { }  (T es conjunto de aristas)
Paso 1: Elimino el vértice inicial k=1. C = {2, 3, 4, 5, 6, 7, 8}
Paso 2: 
e := “selecciono arista de costo mínimo tal que conecta un vertice en C con uno fuera de C.” opciones: (1, 2), (1, 6), (1, 7) y (1, 3). Elijo e := (1, 3) (w=3).
elimino el 3 de C: C = {2, 4, 5, 6, 7, 8}.
agrego (1, 3) a T : T  = { (1, 3),  }
Paso 3:  Opciones: (1, 2), (1, 6), (1, 7), (2, 3), (3, 4), (3, 6) y (3, 8). Elijo e:= (1, 6) (w=3).
Saco el 6: C = {2, 4, 5, 7, 8}
Agrego (1, 6): T = { (1, 3), (1, 6) }
Paso 4: Opciones: (1, 2), (1, 7), (2, 3), (3, 4), (3, 8), (4, 6), (5, 6), (6, 7). Elijo e := (2, 3) (w=4).
Saco el 2: C = {4, 5, 7, 8}
Agrego (2, 3): T = { (1, 3), (1, 6), (2, 3) }
Paso 5: Opciones (1, 7), (3, 4), (3, 8), (4, 6), (5, 6), (6, 7), (2, 4), (2, 5). Elijo e := (2, 5) (w=1).
Saco el 5: C = {4, 7, 8}
Agrego (2, 5): T = { (1, 3), (1, 6), (2, 3), (2, 5) }
Paso 6: Opciones: (1, 7), (3, 4), (3, 8), (4, 6), (6, 7), (2, 4), (5, 4), (8, 5). Elijo e := (2, 4) (w=2).
Saco el 4: C = {7, 8}
Agrego (2, 4): T = { (1, 3), (1, 6), (2, 3), (2, 5), (2, 4) }
Paso 7: Opciones: (1, 7), (3, 8), (6, 7), (8, 5). Elijo e := (8, 5) (w=2).
Saco el 8: C = { 7 }
Agrego (8, 5): T = { (1, 3), (1, 6), (2, 3), (2, 5), (2, 4), (8, 5) }
Paso 8: Opciones (1, 7), (6, 7), (8, 7). Elijo e := (8, 7)  (w=3)
Saco el 7: C = { }
Agrego (8, 7): T = { (1, 3), (1, 6), (2, 3), (2, 5), (2, 4), (8, 5), (8, 7) }
Terminé. Resultado: T = { (1, 3), (1, 6), (2, 3), (2, 5), (2, 4), (8, 5), (8, 7) }.
Peso:          3   +   3    +  4   +   1    +   2   +  2   +   3    =  18


### Ejercicio 3 

Usted quiere irse de vacaciones y debe elegir una ciudad entre K posibles que le interesan. Como no
dispone de mucho dinero, desea que el viaje de ida hacia la ciudad pueda realizarse con a lo sumo L litros
de nafta.

(a) Dé un algoritmo que, dado un grafo representado por una matriz E : array[1..n,1..n] of Nat, donde
el elemento E[i,j] indica el costo en litros de nafta necesario para ir desde la ciudad i hasta la ciudad
j; un conjunto C de vértices entre 1 y n, representando las ciudades que quieren visitarse; un vértice
v, representando la ciudad de origen del viaje; y un natural L, indicando la cantidad de litros de
nafta total que puede gastar; devuelva un conjunto D de aquellos vértices de C que puede visitar con
los L litros.

(b) Ejecute el algoritmo implementado en el inciso anterior para el grafo descripto en el siguiente gráfico,
con vértices 1,2,...11, tomando C = {11,5,10,7,8} como las ciudades de interés, disponiendo de L =
40 litros de nafta. ¿Cuáles son los posibles destinos de acuerdo a su presupuesto?

Ayuda: Utilice el algoritmo de Dijkstra.

Entendiendo el enunciado:

* Tenemos un grafo con 1..n nodos, con costos en las aristas.
* Tenemos un nodo inicial v.
* Dado un subconjunto C de {1...n}, queremos saber a cuáles de esos vértices podemos ir con costo menor a L, partiendo de v.

¿cómo podemos usar Dijkstra?
Dijkstra nos permite obtener el costo del camino de costo mínimo desde v hacia cada uno de los vértices 1,...,n.

Idea:
1. Llamo a Dikstra y obtengo costos = [c1,c2,...,cn] los costos mínimos para ir desde v hacia 1,2,...,n.
2. Recorro el conjunto C: para cada elemento c en C, si costo[c] < L, lo agrego al conjunto solución D.



Ejemplo: n=10. v=3 Dijkstra devuelve [10, 1, 0, 7, 24, 100, 2, 5, 11, 20]. C = {1,2,5,6,7}. L = 9.
¿Cuál es la solución? D = {2, 7}.


Implementamos el algoritmo:

Vamos a usar la función Dijkstra:
fun Dijkstra(L: array[1..n,1..n] of nat, v: nat) ret D: array[1..n] of nat


fun aDondeMeDaLaNafta(E: array[1..n,1..n] of nat, v: nat, C: Set of nat, L: nat) ret D: Set of nat
  var costos: array[1..n] of nat
  var C_aux: Set of nat
  var c: nat

  costos := Dijkstra(E, v)

  {- ahora recorro C y armo el resultado D -}
  D := empty_set()
  C_aux := copy_set(C)
  while not is_empty_set(C_aux) do
    c := get(C_aux)
    if costos[c] <= L then
      add(D, c)
    fi
    elim(C_aux, c)
  od
  destroy(C_aux)
end fun 




