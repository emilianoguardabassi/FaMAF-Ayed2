### Ejercicio 1:

Calculá el orden de complejidad de los siguientes algoritmos:

a) 
proc f1(in n : nat)
    if n <= 1 then skip
    else
        for i := 1 to 8 do f1(n div 2) od 
        for i := 1 to n³ do t := 1 od 
end proc 

b) 
proc f2(in n : nat)
    for i:=1 to n do 
        for j:=1 to i do t:=1 od 
    od 
    if n>0 then 
        for i:=1 to 4 do f2(n div 2) od
end proc


a) 

si n <= 1 entonces O(1)
caso contrario:

8 * f1(n/2) + Sum_{1..n³} 1 

8 * f1(n/2) + O(n³)

usando teorema del maestro:

a = 8, b = 2, f(n) = n³

calculamos exponente crítico p = log_b(a) = log_2(8) = 3 
como f(n) pertenece a O(n^p) estamos en el caso 2 del teorema del maestro,
donde la complejidad es :

T(n) = O(n³ log n)


b) 
primer cuerpo
Sum_{1..n} Sum_{1..i} 1 = Sum_{1..n} i = n(n+1)/2 = O(n²)
segundo cuerpo
si n > 0 
Sum_{1..4} f2(n/2) = 4 * f2(n/2)

ahora calculamos el pero caso

4 * f2(n/2) + O(n²)

veamos a = 4 y b igual a 2 => lob_2(4) = 2 que es igual a el exponente 

por lo tanto la complejidad es O(n² log n)


### Ejercicio 2:

Dado un arreglo a :array\[1..n] of nat se define una cima de a como n valor k en el intervalo 1,...,n 
tal que a\[1..k] está ordenado crecientemente y a\[k..n] está ordenado decrecientemente.

a) Escribí un algoritmo que determine si un arreglo dado tiene cima.
b) Escribí un algoritmo que encuentre la cima de un arreglo dado ( asumiendo que efectivamente tiene cima)
utilizando una búsqueda secuencial, desde el comienzo del arreglo hacia el final.
c) Escribí un algoritmo que resuelva el mismo problema del inciso anterior utilizando la idea de búsqueda
binaria
d) Calculá y compará el orden de complejidad de ambos algoritmos.

resoluciones : 

a) 
asumimos que está ordenado el arreglo
fun have_peak(in a:array[1..n] of nat) ret b:bool
    if n<2 then b:=false
    else
        b := false
        for i:=2 to n-1 do 
            if a[i-1] < a[i] and a[i] < a[i+1] then 
                b = true
                break
        od
end fun

b)

fun find_peak(in a:array[1..n] of nat) ret k:nat 
    k:=a[1]
    for i:=1 to n-1 do 
        if a[i] > a[i + 1] then k:=a[i] fi
    od 
end fun

complejidad O(n)

c) 

fun find_peak_binary(in a: array[1..n] of nat) ret k: nat
    left := 1
    right := n

    while left < right do
        mid := (left + right) div 2
        if a[mid] > a[mid + 1] then
            // Estamos en la parte decreciente
            right := mid
        else
            // Estamos en la parte creciente
            left := mid + 1
        fi
    od
    k := a[left] // left y right convergen en el índice de la cima
end fun


complejidad O(log n)

### Ejercicio 3:
El siguiente algoritmo calcula el mínimo elemento de un arreglo a:array[1..n] of nat mediante la técnica
de programación divide y vencerás. Analizá la eficiencia de minimo(1,n)

fun minimo(a:array[1..n] of nat,i,k:nat) ret m:nat 
    if i=k then m:=a[i]
    else
        j:=(i+k) div 2 
        m:= min(minimo(a,i,j), minimo(a,j+1,k))
    fi 
end fun


Tiempo: O(n).

    El algoritmo realiza n−1n−1 comparaciones en total para calcular el mínimo de todos los elementos, lo que equivale a una búsqueda lineal.
    Aunque utiliza divide y vencerás, el costo de recorrer todas las divisiones recursivas es equivalente al costo de recorrer el arreglo linealmente.

Espacio: O(log n) debido a la profundidad máxima de la pila de llamadas recursivas. Esto ocurre porque en cada nivel, el problema se divide en dos mitades.

